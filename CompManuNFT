// contracts/NFT.sol
// SPDX-License-Identifier: MIT OR Apache-2.0
pragma solidity ^0.8.3;

import "@openzeppelin/contracts/utils/Counters.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts/token/ERC721/ERC721.sol";

import "hardhat/console.sol";


contract CompManuNFT is ERC721URIStorage {
    using Counters for Counters.Counter;
    Counters.Counter private _tokenIds;
    address contractAddress;
    address compManu;

 

    constructor(address NFTManagement) ERC721("Cathode/Anode Tokens", "ComManu") {
        require(NFTManagement != address(0));
        contractAddress = NFTManagement;
        compManu = msg.sender;
    }

  event CathodeNFTSuccessfullyCreated(address _to, uint256 _tokenId, string  _uri);
  event CathodeDynamicNFTsuccessfullyCreated(address _to, uint256 _tokenId, string  _uri, bool dynamic);
  event AnodeNFTSuccessfullyCreated(address _to, uint256 _tokenId, string  _uri);
  event AnodeDynamicNFTsuccessfullyCreated(address _to, uint256 _tokenId, string  _uri, bool dynamic);
  event SeperatorNFTSuccessfullyCreated(address _to, uint256 _tokenId, string  _uri);
  event SeperatorDynamicNFTsuccessfullyCreated(address _to, uint256 _tokenId, string  _uri, bool dynamic);
  event ElectrolyteNFTSuccessfullyCreated(address _to, uint256 _tokenId, string  _uri);
  event ElectrolyteDynamicNFTsuccessfullyCreated(address _to, uint256 _tokenId, string  _uri, bool dynamic);
  event CompManufDynamicNFTnewStatus(uint256 tokenId,string uri); 
  event CompManufCathodeDynamicNFTnewStatus(uint256 tokenId,string uri); 
  event CompManufAnodeDynamicNFTnewStatus(uint256 tokenId,string uri); 
   event CompManufSeperatorDynamicNFTnewStatus(uint256 tokenId,string uri); 
  event CompManufElectrolyteDynamicNFTnewStatus(uint256 tokenId,string uri); 
   
modifier onlyNFTManagementSC(){
    require(msg.sender == contractAddress);
    _;
}

modifier onlyCompManu(){
    require(msg.sender == compManu);
    _;
}
 ////0x0000000000000000000000000000000000000000000000000000006d6168616d
    function mintCathodeNFT(string memory tokenURI,uint status,bool updatable) public onlyCompManu  {
        _tokenIds.increment();
        uint256 newItemId = _tokenIds.current();

        _mint(msg.sender, newItemId);
        _setTokenURI(newItemId, tokenURI);
         _setTokenDynamic(newItemId, updatable);//dynamic = true , static = false
        setApprovalForAll(contractAddress, true);
        if(updatable == false)
        emit CathodeNFTSuccessfullyCreated(msg.sender, newItemId, tokenURI);
        emit CathodeDynamicNFTsuccessfullyCreated(msg.sender, newItemId, tokenURI, updatable);
        
    }


 ////0x0000000000000000000000000000000000000000000000000000006d6168616d
    function mintAnodeNFT(string memory tokenURI,uint status,bool updatable) public onlyCompManu  {
        _tokenIds.increment();
        uint256 newItemId = _tokenIds.current();

        _mint(msg.sender, newItemId);
        _setTokenURI(newItemId, tokenURI);
         _setTokenDynamic(newItemId, updatable);//dynamic = true , static = false
        setApprovalForAll(contractAddress, true);
        if(updatable == false)
        emit AnodeNFTSuccessfullyCreated(msg.sender, newItemId, tokenURI);
        emit AnodeDynamicNFTsuccessfullyCreated(msg.sender, newItemId, tokenURI, updatable);
        
    }

    ///0x0000000000000000000000000000000000000000000000000000006d6168616d
    function mintElectrolyteNFT(string memory tokenURI,uint status,bool updatable) public onlyCompManu  {
        _tokenIds.increment();
        uint256 newItemId = _tokenIds.current();

        _mint(msg.sender, newItemId);
        _setTokenURI(newItemId, tokenURI);
         _setTokenDynamic(newItemId, updatable);//dynamic = true , static = false
        setApprovalForAll(contractAddress, true);
        if(updatable == false)
        emit ElectrolyteNFTSuccessfullyCreated(msg.sender, newItemId, tokenURI);
        emit ElectrolyteDynamicNFTsuccessfullyCreated(msg.sender, newItemId, tokenURI, updatable);
        
    }

  ///0x0000000000000000000000000000000000000000000000000000006d6168616d
    function mintSeperatorNFT(string memory tokenURI,uint status,bool updatable) public onlyCompManu  {
        _tokenIds.increment();
        uint256 newItemId = _tokenIds.current();

        _mint(msg.sender, newItemId);
        _setTokenURI(newItemId, tokenURI);
         _setTokenDynamic(newItemId, updatable);//dynamic = true , static = false
        setApprovalForAll(contractAddress, true);
        if(updatable == false)
        emit SeperatorNFTSuccessfullyCreated(msg.sender, newItemId, tokenURI);
        emit SeperatorDynamicNFTsuccessfullyCreated(msg.sender, newItemId, tokenURI, updatable);
        
    }
//  //only registered buyers
//   function TransferNFTOwnership(uint tokenId, address buyer)   public  
//   {
//       transferFrom(digitalCreator, buyer, tokenId);//transferring ownership
       
//   }

//only registered 
  function UpdateCathodeNFTstatus( string memory uri, uint tokenId) external{
       _setTokenURI(tokenId, uri);
      emit CompManufCathodeDynamicNFTnewStatus(tokenId, uri);
  }

function UpdateAnodeNFTstatus( string memory uri, uint tokenId) external{
       _setTokenURI(tokenId, uri);
      emit CompManufAnodeDynamicNFTnewStatus(tokenId, uri);
  }

  //only registered 
  function UpdateSeperatorNFTstatus( string memory uri, uint tokenId) external{
       _setTokenURI(tokenId, uri);
      emit CompManufSeperatorDynamicNFTnewStatus(tokenId, uri);
  }

function UpdateElectrolyteNFTstatus( string memory uri, uint tokenId) external{
       _setTokenURI(tokenId, uri);
      emit CompManufElectrolyteDynamicNFTnewStatus(tokenId, uri);
  }


}
